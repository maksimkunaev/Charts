{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../src/constants.ts","webpack:///../src/assert.ts","webpack:///../src/crypt.ts","webpack:///../src/deepCopy.ts","webpack:///../src/deferred.ts","webpack:///../src/emulator.ts","webpack:///../src/environment.ts","webpack:///../src/errors.ts","webpack:///../src/json.ts","webpack:///../src/jwt.ts","webpack:///../src/obj.ts","webpack:///../src/query.ts","webpack:///../src/sha1.ts","webpack:///../src/validation.ts","webpack:///../src/utf8.ts","webpack:///../src/compat.ts","webpack:///../../src/platformLoggerService.ts","webpack:///../../src/logger.ts","webpack:///../../src/constants.ts","webpack:///../../src/internal.ts","webpack:///../../src/errors.ts","webpack:///../../src/firebaseApp.ts","webpack:///../../src/api.ts","webpack:///../../src/registerCoreComponents.ts","webpack:///../../src/index.ts","webpack:///../../src/component.ts","webpack:///../../src/provider.ts","webpack:///../../src/component_container.ts","webpack:///./src/utils.js","webpack:///../src/core/version.ts","webpack:///../src/core/storage/DOMStorageWrapper.ts","webpack:///../src/core/storage/MemoryStorage.ts","webpack:///../src/core/storage/storage.ts","webpack:///../src/core/util/util.ts","webpack:///../src/core/AppCheckTokenProvider.ts","webpack:///../src/core/AuthTokenProvider.ts","webpack:///../src/realtime/Constants.ts","webpack:///../src/core/RepoInfo.ts","webpack:///../src/core/stats/StatsCollection.ts","webpack:///../src/core/stats/StatsManager.ts","webpack:///../src/realtime/polling/PacketReceiver.ts","webpack:///../src/realtime/BrowserPollConnection.ts","webpack:///../src/realtime/WebSocketConnection.ts","webpack:///../src/realtime/TransportManager.ts","webpack:///../src/realtime/Connection.ts","webpack:///../src/core/ServerActions.ts","webpack:///../src/core/util/EventEmitter.ts","webpack:///../src/core/util/OnlineMonitor.ts","webpack:///../src/core/util/Path.ts","webpack:///../src/core/util/VisibilityMonitor.ts","webpack:///../src/core/PersistentConnection.ts","webpack:///../src/core/snap/Node.ts","webpack:///../src/core/snap/indexes/Index.ts","webpack:///../src/core/snap/indexes/KeyIndex.ts","webpack:///../src/core/util/SortedMap.ts","webpack:///../src/core/snap/comparators.ts","webpack:///../src/core/snap/snap.ts","webpack:///../src/core/snap/LeafNode.ts","webpack:///../src/core/snap/indexes/PriorityIndex.ts","webpack:///../src/core/snap/childSet.ts","webpack:///../src/core/snap/IndexMap.ts","webpack:///../src/core/snap/ChildrenNode.ts","webpack:///../src/core/snap/nodeFromJSON.ts","webpack:///../src/core/snap/indexes/PathIndex.ts","webpack:///../src/core/snap/indexes/ValueIndex.ts","webpack:///../src/core/util/NextPushId.ts","webpack:///../src/core/view/Change.ts","webpack:///../src/core/view/filter/IndexedFilter.ts","webpack:///../src/core/view/filter/RangedFilter.ts","webpack:///../src/core/view/filter/LimitedFilter.ts","webpack:///../src/core/view/QueryParams.ts","webpack:///../src/core/ReadonlyRestClient.ts","webpack:///../src/core/SnapshotHolder.ts","webpack:///../src/core/SparseSnapshotTree.ts","webpack:///../src/core/stats/StatsListener.ts","webpack:///../src/core/stats/StatsReporter.ts","webpack:///../src/core/operation/Operation.ts","webpack:///../src/core/operation/AckUserWrite.ts","webpack:///../src/core/operation/ListenComplete.ts","webpack:///../src/core/operation/Overwrite.ts","webpack:///../src/core/operation/Merge.ts","webpack:///../src/core/view/CacheNode.ts","webpack:///../src/core/view/EventGenerator.ts","webpack:///../src/core/view/ViewCache.ts","webpack:///../src/core/util/ImmutableTree.ts","webpack:///../src/core/CompoundWrite.ts","webpack:///../src/core/WriteTree.ts","webpack:///../src/core/view/ChildChangeAccumulator.ts","webpack:///../src/core/view/CompleteChildSource.ts","webpack:///../src/core/view/ViewProcessor.ts","webpack:///../src/core/view/View.ts","webpack:///../src/core/SyncPoint.ts","webpack:///../src/core/SyncTree.ts","webpack:///../src/core/util/ServerValues.ts","webpack:///../src/core/util/Tree.ts","webpack:///../src/core/util/validation.ts","webpack:///../src/core/view/EventQueue.ts","webpack:///../src/core/Repo.ts","webpack:///../src/core/util/libs/parser.ts","webpack:///../src/core/view/Event.ts","webpack:///../src/core/view/EventRegistration.ts","webpack:///../src/api/OnDisconnect.ts","webpack:///../src/api/Reference_impl.ts","webpack:///../src/api/Database.ts","webpack:///../src/api/ServerValue.ts","webpack:///../src/api/Transaction.ts","webpack:///../src/api/test_access.ts","webpack:///../src/register.ts","webpack:///./src/index.js","webpack:///./src/charts.js","webpack:///./src/slider.js","webpack:///../index.ts","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/process/browser.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CONSTANTS","assert","assertion","message","assertionError","Error","stringToByteArray","str","out","length","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","this","HAS_NATIVE_SUPPORT","atob","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","btoa","encodeByteArray","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","ENCODED_VALS","ENCODED_VALS_WEBSAFE","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","decodeString","e","console","error","deepCopy","deepExtend","target","source","constructor","Date","getTime","undefined","prop","Deferred","reject","resolve","promise","Promise","callback","catch","createMockUserToken","token","projectId","uid","project","iat","sub","user_id","payload","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","JSON","stringify","alg","type","getUA","navigator","isMobileCordova","window","test","isReactNative","isNodeSdk","FirebaseError","code","customData","super","setPrototypeOf","captureStackTrace","ErrorFactory","service","serviceName","errors","data","fullCode","template","PATTERN","_","replaceTemplate","fullMessage","jsonEval","parse","decode","header","claims","signature","parts","split","isValidFormat","isAdmin","contains","obj","safeGet","isEmpty","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","entries","forEach","arrayVal","encodeURIComponent","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","buf","offset","W","f","lengthMinusBlock","inbuf","compress_","digest","totalBits","update","j","errorPrefix","fnName","argName","high","stringLength","getModularInstance","_delegate","PlatformLoggerServiceImpl","container","getProviders","provider","component","getComponent","isVersionServiceProvider","getImmediate","library","version","filter","logString","appName","_apps","Map","_components","_addComponent","app","addComponent","logger","debug","_addOrOverwriteComponent","addOrOverwriteComponent","_registerComponent","componentName","has","set","values","_getProvider","getProvider","_removeServiceInstance","instanceIdentifier","DEFAULT_ENTRY_NAME","clearInstance","_clearComponents","clear","ERRORS","ERROR_FACTORY","FirebaseAppImpl","options","config","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","val","isDeleted","SDK_VERSION","initializeApp","rawConfig","existingApp","newApp","getApp","getApps","from","async","deleteApp","delete","all","registerVersion","libraryKeyOrName","variant","PLATFORM_LOG_STRING","libraryMismatch","match","versionMismatch","warning","warn","onLog","logCallback","setLogLevel","logLevel","setLogLevelImpl","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","props","Provider","instances","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","deferred","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","optional","isComponentEager","instanceDeferred","services","INTERNAL","_delete","opts","isComponentSet","existingCallbacks","Set","add","existingInstance","callbacks","invokeOnInitCallbacks","ComponentContainer","providers","setComponent","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","TypeError","level","inst","setUserLogHandler","customLogLevel","userLogHandler","arg","toString","ignored","toLowerCase","getTooltipInfo","colors","columns","stepY","y0","height","tooltipInfo","color","col","resultInfo","pointsArray","y","reduce","sum","current","yPosition","point","Math","round","hexToRgb","hex","result","exec","parseInt","g","formatDate","date","day","getDate","short","getMonth","ms","createTemplate","id1","id2","createElem","tag","attributes","textContent","elem","document","createElement","setAttribute","createHtmlBlock","elems","parent","appendChild","wrap","class","content","followers","viewChart","lineChart","canvasView","id","canvasLong","sliderElem","dateElem","columnsElem","tooltipElem","checkboxes","switchLabel","label","labelText","switcher","toolTipBlock","viewChartBlock","lineChartBlock","contentBlock","labelBlock","switchLabelBlock","wrapBlock","querySelector","style","display","createCheckbox","idx","onChange","checkbox","div","text","createTextNode","className","checked","addEventListener","backgroundColor","isVisible","formatNumber","num","numOfDigits","toFixed","setSDKVersion","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","sha1","sha1Bytes","buildLogMessage_","varArgs","apply","firstLog_","enableLogging","logger_","persistent","log","remove","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","len","dataSegs","substring","each","doubleToIEEE754String","v","ln","Infinity","abs","pow","min","floor","LN2","bits","reverse","hexByteString","hexByte","substr","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","then","forceRefresh","getToken","listener","addTokenListener","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","addAuthTokenListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","FORGE_DOMAIN_RE","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","newHost","isCacheableHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","connURL","isCustomHost","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","responseNum","requestNum","toProcess","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","href","Windows","UI","close","myDisconnFrame","removeChild","shutdown_","dataStr","incrementCounter","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","open","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","onerror","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","clearInterval","setInterval","send","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","ALL_TRANSPORTS","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","stats","EventEmitter","allowedEvents_","listeners_","eventType","listeners","context","validateEventType_","eventData","getInitialEvent","splice","find","et","OnlineMonitor","online_","trigger","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","sendRequest","initConnection_","request","_path","q","_queryObject","outstandingGet","index","sendGet_","currentHashFn","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","scheduleConnect_","online","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","delta","serverTimeOffset","put","listen","normalizedPathString","statusCode","explanation","notifyForInvalidToken","queries","clientName","reportStats","currentlyOnline","NamedNode","node","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","__EMPTY_NODE","KeyIndex","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","pop","LLRBNode","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","BLACK","comparator_","root_","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON","LeafNode","value_","priorityNode_","lazyHash_","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","compareTo","LOG_2","Base12Num","current_","mask","bits_","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","indexDefinition","existingChildren","sawIndexedValue","iter","getIterator","Wrap","newIndex","next","getNext","isDefinedOn","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","ChildrenNode","children_","indexMap_","Default","child","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","childHash","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setPriorityMaxNode","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","snap","aChild","extractChild","bChild","valueNode","VALUE_INDEX","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","duplicateTime","timeStampChars","successor","keyAsInt","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","isIndexed","oldChild","hasChild","trackChildChange","withIndex","newSnap","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","inRange","getReverseIterator","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","queryParamsStartAt","queryParams","newParams","queryParamsEndAt","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","sparseSnapshotTreeForEachTree","prefixPath","func","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","getPredecessorChildName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","toSet","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","foreach","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","filtersNodes","viewProcessorRevertUserWrite","ackPath","isCompleteForPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","getChanges","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","getCompleteChild","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","hasLimit","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","indexedValueChanged","eventGeneratorGenerateEventsForChanges","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","writeTreeAddMerge","changeTree","fromObject","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","fold","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeAddEventRegistration","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","foreachChild","childSyncPoint","viewAlreadyExists","queryKey","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childServerCache","childWritesCache","childOperation","operationForChild","viewGetServerCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","validateFirebaseDataArg","validateFirebaseData","errorPrefixFxn","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateKey","argumentName","validatePathString","validateWritablePath","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","unlisten","repoServerTime","repoGenerateServerValues","taggedChildren","raw","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoOnDisconnectCancel","onDisconnectCancel","sparseSnapshotTreeForget","repoOnDisconnectSet","onDisconnectPut","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","nodeQueue","order","to","includeSelf","treeForEachAncestor","repoAbortTransactionsOnNode","treeForEachDescendant","childrenFirst","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","DataEvent","snapshot","ref","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","expDataSnapshot","previousChildName","hasCancelCallback","userCallback","OnDisconnect","wrapCallback","repoOnDisconnectSetWithPriority","childrenToMerge","onDisconnectMerge","repoOnDisconnectUpdate","QueryImpl","_orderByCalled","ReferenceImpl","sameRepo","samePath","sameQueryIdentifier","pathToUrlEncodedString","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","hasAnchoredLimit","parentPath","DataSnapshot","_node","_index","childRef","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","setWithPriority","changedKey","changedValue","repoUpdate","cached","err","repoGetValue","ValueEventRegistration","callbackContext","getEventType","onCancel","onValue","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","repoAddEventCallbackForQuery","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","off","expCallback","QueryConstraint","QueryEndAtConstraint","_value","endAt","QueryEndBeforeConstraint","queryParamsEndBefore","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","queryParamsStartAfter","startAfter","QueryLimitToFirstConstraint","_limit","newLimit","queryParamsLimitToFirst","limitToFirst","limit","QueryLimitToLastConstraint","queryParamsLimitToLast","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","_apply","equalTo","queryConstraints","queryImpl","constraint","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","repoManagerDeleteRepo","apiName","getDatabase","connectDatabaseEmulator","tokenProvider","mockUserToken","repoManagerApplyEmulatorSettings","goOffline","goOnline","resume","enableLoggingImpl","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","toJSON","runTransaction","transactionUpdate","currentState","queueNode","priorityForNode","repoStartTransaction","simpleListen","echo","onEcho","hijackHash","newHash","oldPut","forceRestClient","repoManagerForceRestClient","setMultipleInstances","Chart","Slider","utils","theme","tooltip","mainColor","subColor","night","onChangeTheme","switchTheme","createCheckboxes","shortChart","changeData","customCheckbox","renderChart","fieldName","names","switchData","initChart","initSlider","configShortChart","canvas","configLongChart","longChart","configSlider","main","slider","newTheme","nightTheme","innerText","classList","init","chart_data","Card","apiKey","authDomain","storageBucket","messagingSenderId","starCountRef","charts","getData","domElems","canvasConfig","width","chartConfig","screenWidth","xPositions","x0","stepX","countX","countY","dates","datesPerLine","pageX","getElementById","ctx","getContext","setScreenOptions","onCanvasClick","drawShort","startDate","drawLong","setConfig","endDate","maxX","maxY","newColumns","item","column","end","newColumn","clearChart","drawChart","drawHorizontalLines","drawDates","drawTooltip","beginPath","x","moveTo","lineTo","xPosition","strokeStyle","lineWidth","stroke","step","ceil","lines","fill","lineStep","drawLine","drawText","fillStyle","font","fillText","textSpace","position","clearRect","screen","isMobile","getBoundingClientRect","lineData","getImageData","originalColorsInRgb","rgbColor","coefficient","startColorPoint","endColorPoint","rgbaArray","dotColor","yPoints","clicked","clickOutside","deleteTooltip","xPos","toLocaleDateString","weekday","month","tooltipCenter","transform","drawCircle","drawTooltipName","arc","PI","parents","spanValue","spanName","textTransform","sliderConfig","renderMethod","setStyle","makeDraggable","initTouchEvents","getCoords","callChartRender","parentCoords","sliderWidth","box","top","ondragstart","onMouseDown","event","preventDefault","sliderCoords","shiftX","handlerFunction","direction","resize","diffWidth","border","offsetWidth","clientWidth","newLeft","rightEdge","zIndex","onMouseMove","requestAnimationFrame","onMouseUp","removeEventListener","touchHandler","touch","changedTouches","simulatedEvent","initMouseEvent","touchstart","touchmove","touchend","screenX","screenY","clientX","clientY","dispatchEvent","Function","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","noop","nextTick","arguments","title","browser","argv","versions","addListener","once","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  return typeof indexedDB === 'object';\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  readonly name = ERROR_NAME;\n\n  constructor(\n    readonly code: string,\n    message: string,\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\nexport function initializeApp(\n  options: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","function hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nfunction getTooltipInfo(colors, columns, stepY, y0, height) {\n    const tooltipInfo = {};\n    colors.forEach(color=>{\n        columns.forEach(col => {\n            if (!tooltipInfo[col.name]) {\n                tooltipInfo[col.name] = [];\n            }\n            if (col.name === color.name) {\n                tooltipInfo[col.name].push(color);\n            }\n        })\n    });\n\n    const resultInfo = {};\n\n    for (const key in tooltipInfo) {\n        const pointsArray = tooltipInfo[key];\n        if (!pointsArray.length) continue;\n        const result = tooltipInfo[key].reduce((sum, current) => {\n            return sum + current.yPosition;\n        },0);\n\n        //Y position arithmetic average of all points crossing the vertical line\n        const yPos = result / pointsArray.length;\n        let y = y0 + (height - y0 - yPos);\n\n        const point = Math.round(y/stepY);\n\n        resultInfo[key] = {\n            name: key,\n            yPosition: point,\n            color: pointsArray[0].color,\n        };\n    }\n    return resultInfo;\n}\n\nfunction formatDate(date) {\n    const monthNames = [\n        \"Jan\", \"Feb\", \"Mar\",\n        \"Apr\", \"May\", \"Jun\", \"Jul\",\n        \"Aug\", \"Sep\", \"Oct\",\n        \"Nov\", \"Dec\"\n    ];\n\n    const day = date.getDate();\n    const monthIndex = date.getMonth();\n\n    return {\n        short: monthNames[monthIndex] + ' ' +  day,\n        ms: date,\n    };\n}\n\nfunction createTemplate(id1, id2) {\n\n    function createElem(tag, attributes, textContent) {\n        const elem = document.createElement(tag);\n\n        for (const key in attributes) {\n            elem.setAttribute(key, attributes[key]);\n        }\n        if (textContent) elem.textContent = textContent;\n\n        return elem;\n    }\n\n    function  createHtmlBlock(elems, parent) {\n        elems.forEach(elem => {\n            parent.appendChild(elem);\n        });\n\n        return parent;\n    };\n\n    const wrap = createElem('div', { class: 'wrap' });\n    const content = createElem('div', { class: 'content' });\n    const followers = createElem('div', { class: 'followers' }, 'followers');\n    const viewChart = createElem('div', { class: 'viewChart' });\n    const lineChart = createElem('div', { class: 'lineChart' });\n    const canvasView = createElem('canvas', { class: 'view', id: id1 });\n    const canvasLong = createElem('canvas', { class: 'timeLine', id: id2 });\n    const sliderElem = createElem('div', { class: 'slider' });\n\n    const dateElem = createElem('div', { class: 'date' }, 'Sat, Feb 24');\n    const columnsElem = createElem('div', { class: 'columns' });\n    const tooltipElem = createElem('div', { class: 'tooltip' });\n    const checkboxes = createElem('div', { class: 'checkboxes' });\n\n    const switchLabel = createElem('div', { class: 'switchLabel' });\n    const label = createElem('label');\n    const labelText = createElem('span');\n    const switcher = createElem('input', { class: 'switcher', type: 'checkbox' });\n\n    const toolTipBlock = createHtmlBlock([dateElem, columnsElem], tooltipElem);\n    const viewChartBlock = createHtmlBlock([canvasView, toolTipBlock], viewChart);\n    const lineChartBlock = createHtmlBlock([canvasLong, sliderElem], lineChart);\n    const contentBlock = createHtmlBlock([followers, viewChartBlock, lineChartBlock, checkboxes], content);\n    const labelBlock = createHtmlBlock([labelText, switcher], label);\n    const switchLabelBlock = createHtmlBlock([labelBlock], switchLabel);\n    const wrapBlock = createHtmlBlock([ contentBlock, switchLabelBlock], wrap);\n\n    document.querySelector('.loadWrap').style.display = 'none';\n    return {\n        wrap,\n        content,\n        viewChart,\n        lineChart,\n        canvasView,\n        canvasLong,\n        sliderElem,\n        dateElem,\n        columnsElem,\n        tooltipElem,\n        checkboxes,\n\n        switchLabel,\n        label,\n        labelText,\n        switcher,\n        wrapBlock,\n    };\n}\n\nfunction createCheckbox(name, idx, config, onChange, parent, color) {\n    const checkbox = document.createElement('input');\n    const div = document.createElement('div');\n    const label = document.createElement('label');\n    const text = document.createTextNode(name);\n    checkbox.type = 'checkbox';\n    checkbox.className = 'checkbox';\n    checkbox.checked = true;\n    checkbox.style.display = 'none';\n    checkbox.addEventListener('change', onChange.bind(window, idx - 1, color));\n\n    div.className = 'custom-checkbox';\n    div.style.backgroundColor = color;\n\n    label.appendChild(checkbox);\n    label.appendChild(div);\n    label.appendChild(text);\n    parent.appendChild(label);\n\n    config.push({\n        isVisible: true,\n        idx: idx - 1,\n    });\n\n    return div;\n}\n\nfunction formatNumber(num) {\n    const numOfDigits = (Math.round(num)).toString().length;\n\n    if (numOfDigits > 3 && numOfDigits < 7) {\n        const firstPart = (num / 1000).toFixed(1);\n        return `${firstPart}K`;\n    } else if (numOfDigits > 6) {\n        const firstPart = (num / 1000000).toFixed(1);\n        return `${firstPart}M`;\n    }\n    return num;\n}\n\nmodule.exports.getTooltipInfo = getTooltipInfo;\nmodule.exports.hexToRgb = hexToRgb;\nmodule.exports.formatDate = formatDate;\nmodule.exports.createTemplate = createTemplate;\nmodule.exports.createCheckbox = createCheckbox;\nmodule.exports.formatNumber = formatNumber;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","const Chart = require('./charts');\nconst Slider = require('./slider');\nconst utils = require('./utils');\nconst createTemplate = utils.createTemplate;\nconst createCheckbox = utils.createCheckbox;\nimport { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, onValue} from \"firebase/database\";;\n\nclass Card {\n  template = {};\n  theme = {\n    day: {\n      wrap: 'transparent',\n      sliderElem: 'slider',\n      labelText: 'Switch to Night Mode',\n      tooltip: 'tooltip',\n      checkboxes: '#000',\n      mainColor: '#000',\n      subColor: '#fff',\n    },\n    night: {\n      wrap: '#242f3e',\n      sliderElem: 'slider-nightTheme',\n      labelText: 'Switch to Day Mode',\n      tooltip: 'tooltip-nightTheme',\n      checkboxes: '#fff',\n      mainColor: '#fff',\n      subColor: '#222f3f',\n    }\n  };\n\n  constructor(id, data) {\n    this.data = data;\n\n    this.createTemplate(id);\n    this.initChart();\n    this.initSlider();\n\n    this.template.switcher.addEventListener('change', this.onChangeTheme);\n    this.switchTheme.call(this, 'day');\n\n    this.createCheckboxes();\n  }\n\n  createTemplate(id) {\n    const id1 = `view_${id}`;\n    const id2 = `timeLine_${id}`;\n\n    this.template = createTemplate(id1, id2);\n    this.id1 = id1;\n    this.id2 = id2;\n\n    const {\n      wrapBlock,\n    } = this.template;\n\n    document.body.appendChild(wrapBlock);\n  }\n\n  initChart() {\n    const { id1, id2, data } = this;\n\n    const {\n      wrap,\n      dateElem,\n      columnsElem,\n      tooltipElem,\n      labelText,\n    } = this.template;\n\n    const configShortChart = {\n      wrap,\n      canvas: id1,\n      tooltipElem,\n      columnsElem,\n      dateElem,\n      switchLabel: labelText,\n    };\n\n    const configLongChart = {\n      canvas: id2,\n    };\n\n    this.shortChart = new Chart(configShortChart, data, 'short');\n    this.longChart = new Chart(configLongChart, data, 'long');\n    const { renderChart } = this.shortChart;\n    this.renderChart = renderChart;\n  }\n\n  initSlider() {\n    const { id1, shortChart, longChart, renderChart, data } = this;\n\n    const {\n      lineChart,\n      sliderElem,\n    } = this.template;\n\n    const configSlider = {\n      main: id1,\n      slider: sliderElem,\n      parent: lineChart,\n      method: renderChart.bind(shortChart),\n      longChart: longChart,\n    };\n\n    //init draggable slider\n    new Slider(configSlider, data);\n  }\n\n  onChangeTheme = ({target}) => {\n    const { checked } = target;\n    const theme = checked ? 'night' : 'day';\n\n    this.switchTheme(theme);\n  };\n\n  switchTheme(mode) {\n    const { shortChart, theme } = this;\n\n    const {\n      wrap,\n      sliderElem,\n      tooltipElem,\n      checkboxes,\n      labelText,\n    } = this.template;\n\n    const { renderChart } = this;\n    let newTheme = theme[mode];\n    let nightTheme = theme.night;\n\n    wrap.style.color = newTheme.mainColor;\n    wrap.style.backgroundColor = newTheme.wrap;\n    labelText.innerText = newTheme.labelText;\n    checkboxes.style.color = newTheme.checkboxes;\n\n    if (mode === 'night') {\n      sliderElem.classList.add(nightTheme.sliderElem);\n      tooltipElem.classList.add(nightTheme.tooltip);\n\n    } else if (mode === 'day') {\n      sliderElem.classList.remove(nightTheme.sliderElem);\n      tooltipElem.classList.remove(nightTheme.tooltip);\n    }\n\n    renderChart.call(shortChart, {\n      theme: theme[mode],\n    })\n  }\n\n  createCheckboxes = () => {\n    const { shortChart, data } = this;\n\n    const {\n      checkboxes,\n    } = this.template;\n\n    const { renderChart } = this;\n\n    function switchData(data) {\n      const changeData = (idx, color, e)=> {\n        const { checked } = e.target;\n        const parent = e.target.parentNode;\n        const customCheckbox = parent.querySelector('.custom-checkbox');\n\n        config[idx].isVisible = checked;\n        customCheckbox.style.backgroundColor = checked ? color : 'transparent';\n        shortChart.renderChart({\n          isVisible: config,\n        });\n      };\n\n      const config = [];\n      data.columns.map((col, idx) => {\n        if (idx === 0) return;\n        const fieldName = col[0];\n        const color = data.colors[fieldName];\n        const name = data.names[fieldName];\n\n        createCheckbox(name, idx, config, changeData, checkboxes, color);\n      });\n    }\n\n    switchData(data, renderChart.bind(shortChart));\n  };\n}\n\nfunction init(chart_data) {\n  new Card(1, chart_data[0]);\n  new Card(2, chart_data[1]);\n  new Card(3, chart_data[2]);\n  new Card(4, chart_data[3]);\n  new Card(5, chart_data[4]);\n}\n\nfunction getData() {\n  const firebaseConfig = {\n    apiKey: \"AIzaSyCdp-7vQrEw9HtaPQ_U7BnQ_UnjT5uHrd0\",\n    authDomain: \"charts-e38b9.firebaseapp.com\",\n    databaseURL: \"https://charts-e38b9-default-rtdb.firebaseio.com\",\n    projectId: \"charts-e38b9\",\n    storageBucket: \"charts-e38b9.appspot.com\",\n    messagingSenderId: \"1073528811796\",\n    appId: \"1:1073528811796:web:bc2593236f80de39891201\"\n  };\n\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n\n  const db = getDatabase();\n  const starCountRef = ref(db);\n\n  onValue(starCountRef, (snapshot) => {\n    const data = snapshot.val();\n    init(JSON.parse(data.charts));\n  });\n}\n\ngetData(init);\n","const utils = require('./utils');\nconst hexToRgb = utils.hexToRgb;\nconst getTooltipInfo = utils.getTooltipInfo;\nconst formatDate = utils.formatDate;\nconst formatNumber = utils.formatNumber;\n\nclass Chart {\n    canvas = null;\n    domElems = {};\n\n    canvasConfig = {\n        width: 600,\n        height: 500,\n        ref: null,\n    };\n\n    chartConfig = {\n        screenWidth: null,\n        columns: [],\n        xPositions: [],\n        x0: 30,\n        y0: 30,\n        stepX: 10,\n        stepY: 10,\n        countX: 0,\n        countY: 0,\n        data: [],\n        dates: [],\n        view: '',\n        datesPerLine: 8,\n        tooltipInfo: {},\n        isVisible: [],\n        pageX: null,\n    };\n\n    constructor(domElems, data, view) {\n        const { canvas } = domElems;\n         this.canvas = document.getElementById(canvas);\n         this.domElems = domElems;\n\n        this.ctx = this.canvas.getContext(\"2d\");\n\n        this.chartConfig.data = data;\n        this.canvasConfig.ref = canvas;\n        this.setScreenOptions();\n        this.canvas.addEventListener('click', this.onCanvasClick.bind(this));\n        view === 'short' && this.drawShort({\n            startDate: 0,\n        });\n        view === 'long' && this.drawLong(data, 0);\n    }\n\n    setConfig(startDate, endDate, view) {\n        const { data } = this.chartConfig;\n        const { columns, colors } = this.chartConfig.data;\n\n        const { width, height } = this.canvasConfig;\n        const { isVisible } = this.chartConfig;\n        let maxX = 0;\n        let maxY = 0;\n        this.chartConfig.view = view;\n\n        this.chartConfig.columns = [];\n\n        let newColumns = columns.slice();\n\n        //switch on and off different graphics\n        if (isVisible.length > 1) {\n            isVisible.forEach((item, index) => {\n                const newIndex = isVisible.length - index - 1;\n\n                if (isVisible[newIndex].isVisible === false) {\n                    if (newColumns.length > 2) {\n                        newColumns.splice(newIndex + 1, 1);\n                    }\n                }\n            })\n        };\n\n        newColumns.forEach((column, idx) => {\n            //newColumns[0] is X columns, do not process\n            if (idx === 0) return;\n\n            const start = startDate ? startDate : -11;\n            const end = endDate ? endDate + 1: column.length;\n\n            let newData = [];\n\n            switch(view) {\n                case 'short':\n                newData = column.slice(start, end);\n                    break;\n\n                case 'long':\n                newData = column.slice(1);\n                    break;\n\n                default:\n                    newData = column.slice(1);\n                    break;\n            }\n\n            // set stepY\n            maxY = Math.max(...newData.slice(1)) > maxY ? Math.max(...newData.slice(1)) : maxY;\n\n            // set stepX\n            maxX = newData.length - 1;\n\n            const fieldName = column[0];\n            const name = data.names[fieldName];\n\n            const color = colors[fieldName];\n            const newColumn = {\n                start,\n                end,\n                name,\n                data: newData,\n                color,\n            };\n            this.chartConfig.columns.push(newColumn);\n\n            //set array of dates for X coordinate\n            if (idx !== 1) return; //only for one column is enough\n            this.chartConfig.dates = this.chartConfig.data.columns[0].slice(start, end).map(ms => {\n                return formatDate(new Date(ms))\n            });\n        });\n\n        this.chartConfig.countX = maxX;\n        this.chartConfig.countY = maxY;\n\n        this.chartConfig.stepY = height/ maxY;\n        this.chartConfig.stepX = endDate ? (width * 1.1) / maxX : width / maxX ;\n    }\n\n    drawShort(config) {\n        const { startDate, endDate } = config;\n        this.setConfig(startDate, endDate, 'short');\n        this.clearChart();\n        this.drawChart();\n        this.drawHorizontalLines();\n        this.drawDates();\n        this.drawTooltip();\n    }\n\n    drawLong(data, startDate, endDate) {\n        this.setConfig(startDate, endDate, 'long');\n        this.drawChart()\n    }\n\n    drawChart() {\n        const { height } = this.canvasConfig;\n        const { y0, stepX, stepY, columns, view, dates } = this.chartConfig;\n\n        const { ctx } = this;\n        const draw = (column, index) => {\n            ctx.beginPath();\n\n            const { data, color } = column;\n            data.forEach((point, idx) => {\n                let x = idx * stepX;\n                let y = y0 + (height - y0 - point * stepY);\n                if (idx === 0)\n                    ctx.moveTo(x, y);\n                else\n                    ctx.lineTo(x, y);\n\n                //remember xPosition for every point\n                if (view === 'short' && index === 0) {\n                    this.chartConfig.xPositions.push({\n                        date: dates[idx].short,\n                        xPosition: x,\n                    });\n                }\n            });\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 2;\n            ctx.stroke();\n        };\n\n        columns.forEach(draw);\n    }\n\n    drawHorizontalLines() {\n        const { countY } = this.chartConfig;\n        const linesCount = 5;\n        const step = Math.ceil( countY / linesCount);\n        const { width, height } = this.canvasConfig;\n        const { stepY, y0 } = this.chartConfig;\n\n        //initialize horizontal lines array\n        let lines = new Array(linesCount).fill(step);\n\n        //set lines array\n        lines.map( (step, idx) => {\n            lines[idx] = step * idx\n        });\n\n        lines.forEach(lineStep => {\n            const yPosition = y0 + (height - stepY * lineStep - y0);\n            const text = String(Math.round(lineStep));\n\n            this.drawLine(0, yPosition, width, yPosition, '#9aa6ae');\n            this.drawText(formatNumber(text), 3, yPosition - 10);\n        });\n    }\n\n    drawLine(x0, y0, x, y, color = '#9aa6ae', width = 1) {\n        const { ctx } = this;\n\n        ctx.beginPath();\n        ctx.fillStyle = color;\n        ctx.moveTo(x0, y0);\n        ctx.lineTo(x, y);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = width;\n        ctx.stroke();\n    }\n\n    drawText(text, x, y, color = '#9aa6ae', width = 1) {\n        const { ctx } = this;\n        const { font } = this.chartConfig;\n\n        ctx.beginPath();\n        ctx.fillStyle = color;\n        ctx.font = font;\n        ctx.fillText(text, x, y);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = width;\n        ctx.stroke();\n    }\n\n    drawDates() {\n        const { xPositions, datesPerLine  } = this.chartConfig;\n        const { height } = this.canvas;\n\n        let textSpace = Math.round(xPositions.length / datesPerLine);\n        const datesPositions = xPositions.filter((i,idx)=>{\n            return !(idx % textSpace);\n        });\n\n        datesPositions.forEach(position => {\n            const color = '#9da8af';\n            this.drawText(position.date, position.xPosition, height, color);\n        });\n    }\n\n    clearChart() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this. canvas.height);\n        this.chartConfig.xPositions = [];\n    }\n\n    setScreenOptions() {\n        const { y0 } = this.chartConfig;\n        this.chartConfig.screenWidth = screen.width;\n        this.chartConfig.isMobile = screen.width <= 520;\n        const { isMobile } = this.chartConfig;\n        this.chartConfig.font = isMobile ? \"300 25px sans-serif\" : \"100 20px sans-serif\";\n        this.chartConfig.datesPerLine = isMobile ? 6 : 8;\n\n        this.canvasConfig = {\n            width: isMobile ? 600 : 1800,\n            height: isMobile ? 500 : 500,\n        };\n        this.canvas.width = this.canvasConfig.width;\n        this.canvas.height = this.canvasConfig.height + y0;\n        document.addEventListener('resize', this.setScreenOptions);\n    }\n\n    renderChart(config) {\n\n        this.chartConfig = {\n            ...this.chartConfig, ...config\n        };\n        this.drawShort({\n            startDate: this.chartConfig.startDate,\n            endDate: this.chartConfig.endDate,\n        });\n    }\n\n    onCanvasClick(e) {\n        const { pageX } = e;\n        const { left, width } = this.canvas.getBoundingClientRect();\n\n        const y0 = 0;\n        const height = 500;\n        const resolution = this.canvas.width / width;\n        const x0 = (pageX - left) * resolution;\n\n        // we need to know where we draw horizontal line and what graphics we across\n        // we get Image Line Data (where horizontal line will be drawn)\n        const lineData = this.ctx.getImageData(x0, y0, 1, height);\n        let colors = [];\n\n        const { columns, stepY, tooltipInfo } = this.chartConfig;\n\n        const originalColorsInRgb = columns.map(column => {\n            const rgbColor = hexToRgb(column.color);\n            return {\n                ...column,\n                rgbColor,\n            }\n        });\n\n        const pixelPerDot = lineData.data.length / height;\n        const coefficient = pixelPerDot / 4; //different browsers has different resolution with method getImageData\n\n        // and will see what color we across\n        lineData.data.map((color, idx)=>{\n            if (color) {\n                let colorPosition = idx % 4;\n                let startColorPoint = idx - colorPosition;\n\n                let endColorPoint = startColorPoint + 4;\n                const rgbaArray = lineData.data.slice(startColorPoint, endColorPoint);\n\n                const rgb = {\n                    r: rgbaArray[0],\n                    g: rgbaArray[1],\n                    b: rgbaArray[2],\n                    yPosition: startColorPoint / (4 * coefficient),\n                };\n\n                originalColorsInRgb.forEach((column, idx) => {\n                    const { rgbColor } = column;\n                    for (const key in rgbColor) {\n                        const diff = Math.abs(rgbColor[key]  - rgb[key]);\n                        if (diff > 0.03 * rgbColor[key]) {\n                            return;\n                        }\n                    }\n\n                    const dotColor = {\n                      yPosition: rgb.yPosition,\n                      name: column.name,\n                      color: column.color,\n                    };\n\n                    colors.push(dotColor)\n                });\n            }\n        });\n\n        const config = getTooltipInfo(colors, columns, stepY, y0, height);\n        if (tooltipInfo.x0 === x0) {\n            return;\n        }\n\n        this.chartConfig.tooltipInfo = {\n            yPoints: config,\n            x0,\n            clicked: true,\n        };\n        this.chartConfig.pageX = pageX;\n\n        this.renderChart();\n        this.domElems.wrap.addEventListener('mousedown', this.clickOutside.bind(this));\n    }\n\n    clickOutside({target}) {\n        if (target !== this.canvas && target !== this.domElems.switchLabel) {\n            this.deleteTooltip();\n            this.renderChart();\n        }\n    }\n\n    drawTooltip() {\n        const { tooltipInfo, xPositions, dates, stepY, pageX } = this.chartConfig;\n        const { x0, yPoints, clicked } = tooltipInfo;\n        if (!clicked) return;\n\n        let formatDate = '';\n\n        xPositions.map((xPos, idx) => {\n            if (xPos.xPosition <= x0 && xPositions[idx + 1].xPosition >= x0) {\n                const date = new Date(dates[idx].ms);\n                const options = { weekday: 'short', month: 'short', day: 'numeric' };\n\n                formatDate = date.toLocaleDateString('en-US', options);\n            }\n        });\n\n        const y0 = 100;\n        const height = 500;\n        if (clicked) {\n            this.drawLine(x0, y0, x0, height, 'rgba(223, 230, 235, 0.5)', 2);\n        }\n\n        const { tooltipElem, columnsElem, dateElem } = this.domElems;\n        this.chartConfig.tooltipInfo.node = tooltipElem;\n        this.chartConfig.tooltipInfo.date = formatDate;\n        tooltipElem.style.display = 'flex';\n        const tooltipCenter = tooltipElem.getBoundingClientRect().width / 2;\n        tooltipElem.style.transform = `translateX(${pageX - tooltipCenter}px)`;\n        dateElem.textContent = formatDate;\n\n        columnsElem.innerHTML = null;\n        for (const key in yPoints) {\n            const point = yPoints[key];\n\n            let y = height - point.yPosition * stepY;\n            let color = point.color;\n            this.drawCircle(x0, y, color);\n            Chart.drawTooltipName(point, columnsElem);\n        }\n    }\n\n    deleteTooltip() {\n        this.chartConfig.tooltipInfo.node.style.display = 'none';\n        this.chartConfig.tooltipInfo.clicked = false;\n    }\n\n    drawCircle(x, y, color) {\n        const { ctx } = this;\n        const { theme } = this.chartConfig;\n        const { subColor } = theme;\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 3;\n        ctx.beginPath();\n        ctx.arc(x, y, 5, 0, 2 * Math.PI);\n\n        ctx.fillStyle = subColor;\n        ctx.fill();\n        ctx.stroke();\n    }\n\n    static drawTooltipName(data, parents) {\n        const column = document.createElement('div');\n        const spanValue = document.createElement('span');\n        const spanName = document.createElement('span');\n        spanValue.textContent = data.yPosition;\n        spanName.textContent = data.name;\n        spanName.style.textTransform = 'uppercase';\n        column.classList.add('column');\n        column.style.color = data.color;\n        column.appendChild(spanValue);\n        column.appendChild(spanName);\n\n        parents.appendChild(column);\n    }\n}\n\nmodule.exports = Chart;","class Slider {\n    slider = null;\n    parent = null;\n    data = [];\n\n    sliderConfig = {\n        width: 15,\n        left: 0,\n        right: 15,\n        stepY: 0,\n    };\n\n    renderMethod = () => {};\n\n    constructor(config, data) {\n        const { slider, parent, method } = config;\n\n        this.slider = slider;\n        this.parent = parent;\n        this.data = data.columns[0];\n\n        this.renderMethod = method;\n\n        this.setConfig(config);\n        this.setStyle();\n        this.makeDraggable();\n        this.initTouchEvents();\n        this.slider.style.left = Slider.getCoords(this.parent).right - Slider.getCoords(this.slider).width - Slider.getCoords(this.parent).left + 'px';//move slider to right side of its parent\n        this.callChartRender();\n    }\n\n    callChartRender() {\n        const parentCoords = Slider.getCoords(this.parent);\n\n        const { left: l, right } = Slider.getCoords(this.slider);\n        const from = Math.floor(( l / parentCoords.width ) * this.data.length);\n        const to = Math.ceil(( right / parentCoords.width ) * this.data.length);\n        this.renderMethod({\n            startDate: from <= 0 ? 1 : from,\n            endDate: to,\n        });\n\n    }\n\n    setConfig({ longChart }) {\n        const parentCoords = Slider.getCoords(this.parent);\n        const dayWidth = parentCoords.width / this.data.length < 15 ? 15 : parentCoords.width / this.data.length;\n        const sliderWidth =  10 * dayWidth;\n\n        this.sliderConfig = {\n            width: sliderWidth,\n            left: 0,\n            right: sliderWidth,\n            stepY: longChart.chartConfig.stepY,\n        };\n    }\n\n    static getCoords(elem) {\n        const box = elem.getBoundingClientRect();\n        return {\n            top: box.top,\n            left: box.left,\n            right: box.right,\n            width: box.width,\n        };\n    }\n\n    setStyle() {\n        const { width } = this.sliderConfig;\n        this.slider.style.width = width + 'px';\n    }\n\n    makeDraggable() {\n        this.slider.ondragstart = function() {\n            return false;\n        };\n        this.slider.addEventListener('mousedown',this.onMouseDown.bind(this));\n    }\n\n    onMouseDown(event) {\n        event.preventDefault();\n        const sliderCoords = Slider.getCoords(this.slider);\n\n        //Click on pseudo elements are not processed\n        if (event.pageX < sliderCoords.left || event.pageX >= sliderCoords.right) {\n            return;\n        }\n\n        const parentCoords = Slider.getCoords(this.parent);\n        const shiftX = event.pageX - sliderCoords.left;\n\n        let handlerFunction = () => {};\n        let direction = '';\n        let width = sliderCoords.width;\n\n        const moveAt = event => {\n\n            let newLeft = event.pageX - shiftX - parentCoords.left;\n            if (newLeft < 0) {\n                newLeft = 0;\n            }\n\n            const rightEdge = this.parent.offsetWidth - this.slider.offsetWidth;\n            if (newLeft > rightEdge) {\n                newLeft = rightEdge;\n            }\n            this.slider.style.left = newLeft + 'px';\n\n            const left = this.slider.style.left.split('px')[0];\n            const right = newLeft + this.slider.offsetWidth;\n            this.sliderConfig.left = left;\n            this.sliderConfig.right = right;\n            this.setStyle();\n\n            this.callChartRender();\n        };\n\n        let resize = event => {\n            let newLeft = event.pageX - shiftX - parentCoords.left;\n\n            const left = this.slider.style.left.split('px')[0];\n\n            const diffWidth = newLeft - left;\n            if (direction === 'left') {\n                const left = this.slider.style.left.split('px')[0];\n                const width = this.slider.style.width.split('px')[0];\n                this.sliderConfig.width = +width - diffWidth + 'px';\n                this.slider.style.width = +width - diffWidth + 'px';\n                this.slider.style.left = +left + diffWidth + 'px';\n            } else if (direction === 'right') {\n                this.setStyle();\n                this.sliderConfig.width = width + diffWidth;\n            }\n\n            this.callChartRender();\n        };\n\n        const border =  (this.slider.offsetWidth - this.slider.clientWidth) / 2;\n        if (event.pageX >=sliderCoords.left && event.pageX <= (sliderCoords.left + border)) {\n            handlerFunction = resize;\n            direction = 'left';\n        } else if (event.pageX >=sliderCoords.right - border && event.pageX <=sliderCoords.right) {\n            handlerFunction = resize;\n            direction = 'right';\n        } else {\n            handlerFunction = moveAt;\n        }\n\n        handlerFunction(event);\n        this.slider.style.zIndex = '1000';\n\n        const onMouseMove = event => {\n            event.preventDefault();\n            requestAnimationFrame(() => {\n                handlerFunction(event);\n            })\n        };\n\n        const onMouseUp = event => {\n            event.preventDefault();\n\n            this.slider.removeEventListener('mousemove',onMouseMove);\n            this.slider.removeEventListener('mouseup',onMouseUp);\n        };\n\n        this.slider.addEventListener('mousemove',onMouseMove);\n        this.slider.addEventListener('mouseup',onMouseUp)\n    }\n\n    initTouchEvents() {\n        function touchHandler(event) {\n            const touch = event.changedTouches[0];\n\n            const simulatedEvent = document.createEvent(\"MouseEvent\");\n            simulatedEvent.initMouseEvent({\n                    touchstart: \"mousedown\",\n                    touchmove: \"mousemove\",\n                    touchend: \"mouseup\"\n                }[event.type], true, true, window, 1,\n                touch.screenX, touch.screenY,\n                touch.clientX, touch.clientY, false,\n                false, false, false, 0, null);\n\n            touch.target.dispatchEvent(simulatedEvent);\n        }\n\n        document.addEventListener(\"touchstart\", touchHandler, true);\n        document.addEventListener(\"touchmove\", touchHandler, true);\n        document.addEventListener(\"touchend\", touchHandler, true);\n        document.addEventListener(\"touchcancel\", touchHandler, true);\n    }\n}\n\nmodule.exports = Slider;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"sourceRoot":""}